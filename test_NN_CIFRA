from DeepSemanticLearningMachine.NeuralNetwork import NeuralNetwork
from tensorflow.keras.datasets import cifar10
from tensorflow import keras
from copy import copy



(x_train, y_train), (x_test, y_test) = cifar10.load_data()
num_classes = 10
num_predictions = 20

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

x_test.shape

Network = NeuralNetwork(input_shape=(32, 32, 3), n_outputs=10, seed=5, x_train=x_train, y_train=y_train, x_test=x_test)

# opt = keras.optimizers.RMSprop(learning_rate=0.0001, decay=1e-6)
# Network.model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
x = x_test
print(id(Network.x_test))
Network2 = copy(Network)
print(id(Network2.x_test))
# #print(id(Network.copy().x_train))
# Network.single_filter_mutation()
# print(Network.semantics_size)
# Network.single_filter_mutation()
# print(Network.semantics_size)
# Network.single_filter_mutation()
# print(Network.semantics_size)
# Network.single_filter_mutation()
# print(Network.semantics_size)
# Network.single_filter_mutation()
# print(Network.semantics_size)
# Network.single_filter_mutation()
# print(Network.semantics_size)
# Network.single_filter_mutation()
# print(Network.semantics_size)

#print(x.nbytes / 1.E6)
#print(id(x))
#print(x.shape)
#print(id(Network.x_train))
#print(id(Network.initial_input_node.semantics))


